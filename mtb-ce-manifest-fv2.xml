<apps version="2.0">
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh,t2gbh_lite]">
    <name>INTERRUPT NMI Timing Protection</name>
    <id>mtb-t2g-example-nmi-timing-protection</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-nmi-timing-protection</uri>
    <description><![CDATA[This code example demonstrates the Timing Protection configuration using Non Maskable Interrupt (NMI), shows its operation, initial setting, and interrupt handling. In this example, the Interrupt Service Routine (ISR) processing time is protected. If the processing time limit is exceeded, an NMI is generated and appropriate action can be taken.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-nmi-timing-protection/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite]">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh,t2gbh_lite]">
    <name>SECURE boot</name>
    <id>mtb-t2g-example-secure-boot</id>
    <category>Security</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-secure-boot</uri>
    <description><![CDATA[This code example demonstrates how to configure the firmware to Secure Boot. In this CE, the TRAVEO&#8482; T2G MCU's Flash Boot, which is first verified by BootROM and guaranteed secure, verifies the CM0+ firmware. After booting, the CM0+ firmware verifies the CM7_0/1 firmware and enables them only if the signatures match.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-secure-boot/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite]">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh,t2gbh_lite]">
    <name>INTERRUPT Software Interrupt</name>
    <id>mtb-t2g-example-software-interrupt</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-software-interrupt</uri>
    <description><![CDATA[This code example shows how to generate software interrupts and describes their operation, initialization, and interrupt handling. In this example, software is used to generate an indirect interrupt, by setting the interrupt bit of a timer peripheral.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-software-interrupt/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite]">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh,t2gbh_lite,t2gc2d]">
    <name>M-DMA Memorycopy</name>
    <id>mtb-t2g-example-mdma-memorycopy</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-mdma-memorycopy</uri>
    <description><![CDATA[This code example demonstrates the transmission of data from memory to memory by Memory DMA (M-DMA), shows its operation, initial setting, and interrupt handling. This code example demonstrates the transmission of data from Code Flash to SRAM by M-DMA. M-DMA transfer is initiated using software triggers.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-mdma-memorycopy/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.3.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.3.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.2.0" req_capabilities_per_version_v2="[bsp_gen5][kit_t2g_c_2d_6m_lite]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.2.0" req_capabilities_per_version_v2="[bsp_gen5][kit_t2g_c_2d_6m_lite]">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.2.0" req_capabilities_per_version_v2="[bsp_gen5][kit_t2g_c_2d_6m_lite]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite]">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh_lite,t2gbe]">
    <name>GPIO Pins</name>
    <id>mtb-t2g-lite-example-gpio-pins</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-lite-example-gpio-pins</uri>
    <description><![CDATA[This example demonstrates the GPIO pin operation on the TRAVEO&#8482; T2G body high MCU, using Eclipse IDE for ModusToolbox&#8482;. This includes reading, writing, interrupts, and full configuration.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-lite-example-gpio-pins/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh_lite,t2gbe]">
    <name>ADC basic</name>
    <id>mtb-t2g-lite-example-adc-basic</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-lite-example-adc-basic</uri>
    <description><![CDATA[This code example demonstrates the use of the ADC HAL driver to perform voltage measurements. In this example, the driver is configured to sample the input voltage periodically and display the sampled voltage on the UART terminal. By default, the ADC is configured to use one channel in single-ended mode.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-lite-example-adc-basic/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh_lite,t2gbe]">
    <name>EVTGEN trigger ADC</name>
    <id>mtb-t2g-lite-example-evtgen-active-trigger-adc</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-lite-example-evtgen-active-trigger-adc</uri>
    <description><![CDATA[This code example demonstrates how to use the TRAVEO&#8482; T2G MCU event generator (EVTGEN) resource to trigger ADC conversion in active power mode. In this example, the event generator is configured to trigger an ADC conversion every second, and when ADC conversion is complete, print out the ADC result via UART.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-lite-example-evtgen-active-trigger-adc/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh_lite,t2gbe]">
    <name>Smart IO with GPIO</name>
    <id>mtb-t2g-lite-example-smartio-gpio</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-lite-example-smartio-gpio</uri>
    <description><![CDATA[This example uses the smart I/O peripheral in TRAVEO&#8482; T2G MCU to connect the button input pin to an output pin to toggle an external LED. There is no CPU usage except for the initialization of GPIO and smart I/O.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-lite-example-smartio-gpio/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh_lite,t2gbe]">
    <name>TCPWM Dead Time Mode</name>
    <id>mtb-t2g-lite-example-tcpwm-dt</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-lite-example-tcpwm-dt</uri>
    <description><![CDATA[This code example shows TCPWM dead-time mode function. PWM line and PWM COMPL pins output the 1-kHz frequency wave and 1-kHz frequency wave with PWM leftalign 250 us in PWM dead-time mode
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-lite-example-tcpwm-dt/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh_lite,t2gbe]">
    <name>Toggle LED with SysTick Timer</name>
    <id>mtb-t2g-lite-example-systick-led</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-lite-example-systick-led</uri>
    <description><![CDATA[This code example demonstrates how to use the SysTick timer to generate a timer interrupt on TRAVEO&#8482; T2G MCU. The user LED is toggled when 10 SysTick timer interrupts are generated.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-lite-example-systick-led/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh_lite,t2gbe]">
    <name>CAN FD</name>
    <id>mtb-t2g-lite-example-canfd</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-lite-example-canfd</uri>
    <description><![CDATA[This code example demonstrates how to use controller area network flexible data-rate (CAN FD) in TRAVEO&#8482; T2G MCU devices. In this example, the CAN Node-1 sends a CAN FD or standard frame to CAN Node-2 on pressing the user button and vice versa. Both the CAN nodes log the received data over UART serial terminal. Each time a CAN frame is received, the user LED toggles.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-lite-example-canfd/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh_lite]">
    <name>SCB SPI Master DMA</name>
    <id>mtb-t2g-lite-example-spi-master-dma</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-lite-example-spi-master-dma</uri>
    <description><![CDATA[This example demonstrates the use of the SPI serial communication block (SCB) resource for Infineon MCU in master and slave mode using DMA. The SPI master is configured to send command packets to control a user LED on the slave. Both the master and slave can be on the same device or on different devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-lite-example-spi-master-dma/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbe" req_capabilities_v2="[t2gbe]">
    <name>Emulated EEPROM</name>
    <id>mtb-t2g-lite-example-emulated-eeprom</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-lite-example-emulated-eeprom</uri>
    <description><![CDATA[This example uses the Arm&#174; Cortex&#174;-M7 (CM7_0) CPU of the TRAVEO&#8482; T2G MCU to execute two tasks: UART communication and emulate EEPROM behavior in flash memory.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-lite-example-emulated-eeprom/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbe</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_t2g_b_e_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_t2g_b_e_lite]">
        <num>1.3.0 release</num>
        <commit>release-v1.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_t2g_b_e_lite]">
        <num>1.2.0 release</num>
        <commit>release-v1.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_t2g_b_e_lite]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_t2g_b_e_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh_lite,t2gbe]">
    <name>TCPWM Counter</name>
    <id>mtb-t2g-lite-example-tcpwm-counter</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-lite-example-tcpwm-counter</uri>
    <description><![CDATA[This code example demonstrates how to use the tcpwm counter on the TRAVEO&#8482; T2G MCU. The counter is started by pwm signal and work with 200KHz clock frequency. Enable the counter CC0 match interrupt, when counter up to CC0 match value generates the interrupt to toggle user LED.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-lite-example-tcpwm-counter/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5] [kit_t2g_b_h_lite, kit_t2g_b_e_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5] [kit_t2g_b_h_lite, kit_t2g_b_e_lite]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5] [kit_t2g_b_h_lite, kit_t2g_b_e_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbe" req_capabilities_v2="[t2gbe]">
    <name>MCWDT Interrupt</name>
    <id>mtb-t2g-lite-example-mcwdt</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-lite-example-mcwdt</uri>
    <description><![CDATA[This example shows how to configure TRAVEO&#8482; T2G MCWDT Subcounter0/1 and Subcounter2 operation with interrupt.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-lite-example-mcwdt/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbe</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_t2g_b_e_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_t2g_b_e_lite]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_t2g_b_e_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbe" req_capabilities_v2="[t2gbe]">
    <name>SCB UART Transmit and Receive using DMA</name>
    <id>mtb-t2g-lite-example-uart-transmit-receive-dma</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-lite-example-uart-transmit-receive-dma</uri>
    <description><![CDATA[This code example demonstrates the UART transmit and receive operation in TRAVEO&#8482; T2G using DMA. The application uses a serial terminal to read data and echoes what is received. UART is configured to perform both transmit and receive operations.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-lite-example-uart-transmit-receive-dma/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbe</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_t2g_b_e_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_t2g_b_e_lite]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_t2g_b_e_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh,t2gbh_lite,t2gc2d]">
    <name>FAULT REPORT Configuration</name>
    <id>mtb-t2g-example-fault-report-configuration</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-fault-report-configuration</uri>
    <description><![CDATA[This code example shows how to configure the fault subsystem and describes its operation. In this example, a correctable error correction code (ECC) error is injected into the memory, causing a fault.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-fault-report-configuration/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.3.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.3.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.2.0" req_capabilities_per_version_v2="[bsp_gen5][kit_t2g_c_2d_6m_lite]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.2.0" req_capabilities_per_version_v2="[bsp_gen5][kit_t2g_c_2d_6m_lite]">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.2.0" req_capabilities_per_version_v2="[bsp_gen5][kit_t2g_c_2d_6m_lite]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh,t2gbh_lite]">
    <name>SMIF QSPI Flash Read Write</name>
    <id>mtb-t2g-example-smif-qspi-flash-read-write</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-smif-qspi-flash-read-write</uri>
    <description><![CDATA[This example demonstrates interfacing with an external NOR flash memory in Quad SPI (QSPI) mode using the serial memory interface (SMIF) in Infineon MCU. This code example configures the QSPI flash memory mounted on the board with the QSPI Configurator and accesses it via the serial-flash library.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-smif-qspi-flash-read-write/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh,t2gbh_lite,t2gc2d]">
    <name>P-DMA 2D Transfer</name>
    <id>mtb-t2g-example-pdma-2d-transfer</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-pdma-2d-transfer</uri>
    <description><![CDATA[This code example demonstrates the transmission of data by Peripheral Direct Memory Access (P-DMA) 2D Transfer, shows its operation, initial setting, and interrupt handling. This code example demonstrates the transmission of data by P-DMA with 2D-Transfer.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-pdma-2d-transfer/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.3.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.3.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.2.0" req_capabilities_per_version_v2="[bsp_gen5][kit_t2g_c_2d_6m_lite]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.2.0" req_capabilities_per_version_v2="[bsp_gen5][kit_t2g_c_2d_6m_lite]">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.2.0" req_capabilities_per_version_v2="[bsp_gen5][kit_t2g_c_2d_6m_lite]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh,t2gbh_lite,t2gbe,t2gc2d]">
    <name>TCPWM Asymmetric PWM Generation</name>
    <id>mtb-t2g-example-pwm-dual-compare-capture</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-pwm-dual-compare-capture</uri>
    <description><![CDATA[This code example demonstrates the generation of asymmetric PWM signals using two compare/capture registers available in the Timer, Counter and PWM (TCPWM) block. Compared to the asymmetric PWM realized with only one compare function (where the CPU is used to update the compare value twice every PWM cycle), this solution uses two independent buffered compare values and causes less load on the CPU (where the CPU is used to update the compare value once every PWM cycle). PWM waveform can be modified through the command on the terminal.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-pwm-dual-compare-capture/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.3.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.3.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.2.0" req_capabilities_per_version_v2="[bsp_gen5][kit_t2g_c_2d_6m_lite]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.2.0" req_capabilities_per_version_v2="[bsp_gen5][kit_t2g_c_2d_6m_lite]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh,t2gbh_lite]">
    <name>PROT PPU ECC Injection</name>
    <id>mtb-t2g-example-prot-ppu-ecc-injection</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-prot-ppu-ecc-injection</uri>
    <description><![CDATA[This code example shows how to perform the error injection onto Error Correcting Code (ECC) of Peripheral Protection Unit (PPU). The static random-access memory (SRAM) stored protection information of PPU is supported by ECC. This ECC supports single error correction and double error detection (SECDED). In this example, an ECC error is injected into the SRAM that contains PPU configuration.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-prot-ppu-ecc-injection/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh,t2gbe]">
    <name>SMART IO Glitch Filter</name>
    <id>mtb-t2g-example-smart-io-glitch-filters</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-smart-io-glitch-filters</uri>
    <description><![CDATA[This code example shows how to configure the glitch filter using Smart I/O functionality. In this example, glitch signal is connected to Smart I/O to filter the glitch and provide a filtered output signal. No CPU load is required to perform the filtering, except for initialization of general-purpose input/output (GPIO) and Smart I/O.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-smart-io-glitch-filters/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_e_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_e_lite]">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_e_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh_lite]">
    <name>ADC 3CHs simultaneous conversion using TCPWM</name>
    <id>mtb-t2g-example-adc-simul-conversion</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-adc-simul-conversion</uri>
    <description><![CDATA[This code example demonstrates how to convert multiple SAR ADC (Successive Approximation Register Analog-to-Digital Converter) channels simultaneously by triggering the TCPWM (Timer, Counter and PWM) counter. In this example, three SAR-ADC channels ADC[0]_0, ADC[1]_0 and ADC[2]_0 are configured to get trigger from the TCPWM counter. The trigger from the TCPWM counter is connected in parallel to the SAR sequencer of each channel using trigger multiplexer. All the ADC conversion of each channel will start simultaneously as soon as the counter reaches its terminal count.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-adc-simul-conversion/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh,t2gbh_lite]">
    <name>TCPWM Simultaneous Startup</name>
    <id>mtb-t2g-example-tcpwm-simul-start</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-tcpwm-simul-start</uri>
    <description><![CDATA[This code example demonstrates how to trigger multiple TCPWM (Timer, Counter and PWM) channels simultaneously by software. In this example, the LED-A and LED-B on the target board connected to the PWM output pin and blink at the rate of 2Hz with different duty cycles. These PWMs are made by TCPWM (Timer, Counter, and PWM) and simultaneously activated by software via Trigger Multiplexer.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-tcpwm-simul-start/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh,t2gbh_lite,t2gbe]">
    <name>ADC Conversion Result Processing</name>
    <id>mtb-t2g-example-adc-processing-result</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-adc-processing-result</uri>
    <description><![CDATA[This code example shows how the conversion results of the SAR ADC change depending on the various conversion output methods. In this example, the results of various ADC conversion output methods (Averaging, Alignment, Sign Extension) are executed. The KIT potentiometer is set as the ADC input and the conversion is performed. The results are sent to the terminal each time according to the user's input, which includes the average count and the output format.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-adc-processing-result/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh,t2gbh_lite,t2gbe,t2gc2d]">
    <name>TCPWM Capture</name>
    <id>mtb-t2g-example-tcpwm-capture</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-tcpwm-capture</uri>
    <description><![CDATA[This code example shows how to configure the capture function using TCPWM (Timer, Counter and Pulse Width Modulator) block and describes its operation and initial settings. The example configures TCPWM (Timer, Counter and Pulse Width Modulator) as the Counter mode with User button (USER_BTN) as input. The button is used as start, reload and stop trigger. In addition, the rising edge made by the button release will be captured by the counter.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-tcpwm-capture/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.3.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.3.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.2.0" req_capabilities_per_version_v2="[bsp_gen5][kit_t2g_c_2d_6m_lite]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.2.0" req_capabilities_per_version_v2="[bsp_gen5][kit_t2g_c_2d_6m_lite]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh_lite]">
    <name>Clock External Output</name>
    <id>mtb-t2g-example-clock-external-output</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-clock-external-output</uri>
    <description><![CDATA[This code example demonstrates how to use the clock output feature which routes clock CLK_HF3 to an external pin. In this example a pin will be configured to output the clock CLK_HF3. The user will be able to change the frequency of CLK_HF3 during runtime. In a real application this feature can be used for supplying external components with a clock signal or for diagnostic/debugging purposes like monitoring an internal clock signal on a port pin.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-clock-external-output/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh_lite]">
    <name>M-DMA Scatter Transfer</name>
    <id>mtb-t2g-example-mdma-scatter</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-mdma-scatter</uri>
    <description><![CDATA[This code example demonstrates how to use the scatter functionality of the M-DMA block. This example shows a memory transfer via Memory Direct Memory Access (M-DMA) in scatter mode, which allows to transfer data to multiple locations in memory in one transfer. For this, the source data must be specified in a specific way. In a real application, this can be used to write many configuration values into registers scattered around in memory in one transfer. M-DMA handles these transfers without CPU involvement.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-mdma-scatter/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh_lite]">
    <name>ADC Calibration</name>
    <id>mtb-t2g-example-adc-calibration</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-adc-calibration</uri>
    <description><![CDATA[This code example demonstrates the ADC calibration algorithm. In this example, the ADC calibration algorithm is executed to find an optimal offset and gain compensation for the ADC. It is also providing the options for decalibration by setting different offset and gain values (boundary values) which result in a decalibrated analog-to-digital transfer curve. A single ADC conversion is showing the voltage level of a potentiometer output while the calibration is done on a different logical ADC channel.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-adc-calibration/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh_lite,t2gc2d]">
    <name>ADC Range Detection</name>
    <id>mtb-t2g-example-adc-range-detection</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-adc-range-detection</uri>
    <description><![CDATA[This code example demonstrates the ADC range detection feature of the SAR ADC module. This feature is useful to monitor whether the converted result of ADC voltage is within the required range. In this example, the ADC range detection feature is configured to trigger an interrupt whenever the ADC output voltage goes out of the range marked by user-selected threshold voltages. The onboard potentiometer is used to provide input voltage level to the selected ADC channel. Optionally, an external waveform generator can be used to provide an adequate ADC input signal. The onboard USER_LED is switched on whenever the ADC input voltage goes out of range.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-adc-range-detection/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.3.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.3.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.2.0" req_capabilities_per_version_v2="[bsp_gen5][kit_t2g_c_2d_6m_lite]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.2.0" req_capabilities_per_version_v2="[bsp_gen5][kit_t2g_c_2d_6m_lite]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh_lite,t2gc2d]">
    <name>ADC Pulse Detection</name>
    <id>mtb-t2g-example-adc-pulse-detection</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-adc-pulse-detection</uri>
    <description><![CDATA[This code example illustrates the functionality of the SAR ADC module's pulse detection feature. This feature relies on ADC range detection and serves the purpose of monitoring whether the converted ADC voltage result falls within the specified range while considering a filtering function. In this example, we configure the ADC pulse detection feature to trigger an interrupt whenever the ADC input voltage deviates beyond the threshold voltages set by the user. Unlike the standard ADC range detection mode, we incorporate a hardware reload counter to tally the range detection events. The interrupt callback function is executed only when a certain number of predefined events are detected. To provide the input voltage level to the chosen ADC channel, we utilize an onboard potentiometer. Alternatively, an external waveform generator can be employed to supply an appropriate ADC input signal. Whenever the ADC input voltage deviates from the specified range for the predefined reload counter value, the configured GPIO pin gives a momentary HIGH signal. The primary purpose of the pulse detection feature is to filter out glitches or noise from the observed analog signal, among other potential applications.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-adc-pulse-detection/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.3.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.3.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.2.0" req_capabilities_per_version_v2="[bsp_gen5][kit_t2g_c_2d_6m_lite]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.2.0" req_capabilities_per_version_v2="[bsp_gen5][kit_t2g_c_2d_6m_lite]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh,t2gbh_lite]">
    <name>ADC Diagnostic Reference Conversion</name>
    <id>mtb-t2g-example-adc-diag-ref</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-adc-diag-ref</uri>
    <description><![CDATA[This code example demonstrates the usage of the diagnostic reference for debugging the functionality of the on-chip ADC (Analog-to-Digital Converter) module. In this example, the diagnostic reference module is used to provide a known voltage as an input to the ADC module. The purpose of this setup is to test the ADC's functionality. The output count of the ADC is converted to equivalent voltage. The ADC is working correctly, if the measured voltage matches the input voltage within an acceptable margin of error.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-adc-diag-ref/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh_lite]">
    <name>Trigger Multiplexer TRIG_DBG signal</name>
    <id>mtb-t2g-example-trigmux-trig-dbg</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-trigmux-trig-dbg</uri>
    <description><![CDATA[This code example demonstrates the usage of the TRIG_DBG signal at a port pin as a means for debugging on-chip trigger activity. In this example, one of the trigger outputs of a Timer Counter Pulse Width Modulation (TCPWM) HW module is observable at a port pin using the Trigger Multiplexer HSIOM_IO_OUTPUT trigger output and TRIG_DBG port function. In a real application this could be used for debugging purposes to check the occurrence of trigger events or their temporal relationship to other signals.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-trigmux-trig-dbg/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh,t2gbh_lite]">
    <name>FLASH ECC Injection</name>
    <id>mtb-t2g-example-flash-ecc-injection</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-flash-ecc-injection</uri>
    <description><![CDATA[This code example demonstrates the usage of the ECC error injection feature to test the functionality of Flash Error Correcting Code (ECC). In this example, the ECC error injection mechanism is used to inject an error into the target Code Flash address. When the target address is read, the flash controller's ECC logic triggers a fault through the central fault sub-system, indicating the error. In case of non-correctable errors, a bus error is returned to the requester in addition. The faults are then handled, and the fault information is displayed. This example demonstrates Single Error Correction and Double Error Detection (SECDED).
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-flash-ecc-injection/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh,t2gbh_lite]">
    <name>P-DMA ECC Injection</name>
    <id>mtb-t2g-example-pdma-ecc-injection</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-pdma-ecc-injection</uri>
    <description><![CDATA[This code example demonstrates the usage of the ECC error injection feature to test the functionality of the ECC logic for the P-DMA channel configuration SRAM memory. In this example, the ECC error injection mechanism is used to inject an error into the target P-DMA channel's SRAM word. When the target address is read, the P-DMA ECC logic triggers a fault through the central fault sub-system, indicating the error. The faults are then handled, and the fault information is displayed. This example demonstrates Single Error Correction and Double Error Detection (SECDED).
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-pdma-ecc-injection/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbe" req_capabilities_v2="[t2gbe]">
    <name>FreeRTOS blinky</name>
    <id>mtb-t2g-lite-example-blinky-freertos</id>
    <category>Getting Started</category>
    <uri>https://github.com/Infineon/mtb-t2g-lite-example-blinky-freertos</uri>
    <description><![CDATA[This code example demonstrates the blinking LED functionality implemented by FreeRTOS tasks on the TRAVEO&#8482; T2G body entry MCU devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-lite-example-blinky-freertos/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbe</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4][kit_t2g_b_e_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4][kit_t2g_b_e_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbe" req_capabilities_v2="[t2gbe]">
    <name>Code Flash Sector Data Updating</name>
    <id>mtb-t2g-lite-example-hal-code-flash-sector-data-updating</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-lite-example-hal-code-flash-sector-data-updating</uri>
    <description><![CDATA[This code example demonstrates the use of the Flash HAL driver to perform code flash Read/Write/Erase basic operate and update sector data online. The running steps logs on a UART terminal emulator.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-lite-example-hal-code-flash-sector-data-updating/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbe</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4][kit_t2g_b_e_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4][kit_t2g_b_e_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh,t2gbh_lite,t2gbe]">
    <name>RTC Basics</name>
    <id>mtb-t2g-lite-example-hal-rtc-basics</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-lite-example-hal-rtc-basics</uri>
    <description><![CDATA[This example demonstrates the usage of the real-time clock (RTC) in Infineon MCU. It shows how to get and set the time in the RTC using the RTC HAL API.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-lite-example-hal-rtc-basics/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_evk,kit_t2g_b_h_lite,kit_t2g_b_e_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbe" req_capabilities_v2="[t2gbe]">
    <name>HAL SPI Master</name>
    <id>mtb-t2g-lite-example-hal-spi-master</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-lite-example-hal-spi-master</uri>
    <description><![CDATA[This example demonstrates the use of SPI (HAL) resource in Master mode. The SPI master is configured to send command packets to control a user LED on the slave.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-lite-example-hal-spi-master/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbe</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4][kit_t2g_b_e_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4][kit_t2g_b_e_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbe" req_capabilities_v2="[t2gbe]">
    <name>HAL SPI Slave</name>
    <id>mtb-t2g-lite-example-hal-spi-slave</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-lite-example-hal-spi-slave</uri>
    <description><![CDATA[This code example demonstrates the use of SPI (HAL) resource in Slave mode. The SPI slave is configured to receive command packets to control a user LED on the kit.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-lite-example-hal-spi-slave/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbe</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4][kit_t2g_b_e_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4][kit_t2g_b_e_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbe" req_capabilities_v2="[t2gbe]">
    <name>Fault Handling</name>
    <id>mtb-t2g-lite-example-pdl-fault-handling</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-lite-example-pdl-fault-handling</uri>
    <description><![CDATA[This example demonstrates the fault handling functionality of TRAVEO&#8482; T2G MCU using Peripheral Driver Library (PDL) System Library (SysLib).
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-lite-example-pdl-fault-handling/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbe</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4][kit_t2g_b_e_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4][kit_t2g_b_e_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbe" req_capabilities_v2="[t2gbe]">
    <name>LVD Interrupt</name>
    <id>mtb-t2g-lite-example-pdl-lvd-interrupt</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-lite-example-pdl-lvd-interrupt</uri>
    <description><![CDATA[This code example shows how to configure low-voltage detection (LVD) in TRAVEO&#8482; T2G MCU to monitor VDDD and generate an interrupt when VDDD drops below the configured threshold.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-lite-example-pdl-lvd-interrupt/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbe</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4][kit_t2g_b_e_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4][kit_t2g_b_e_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbh" req_capabilities_v2="[t2gbh_lite]">
    <name>TCPWM Shift Register Mode</name>
    <id>mtb-t2g-example-tcpwm-srmode</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-tcpwm-srmode</uri>
    <description><![CDATA[This code example demonstrates the delayed signal generation using Shift Register (SR) mode. The SR functionality shifts the counter value in the right direction. The capture0 input is used to generate the MSB of the next counter value. The line output signal is driven from a programmable tab of the counter. In this example, the capture0 is assigned to the user button of the kit and the line output is assigned to the user LED of the kit as well, so the LED will light up about 0.5s later from the press of the button.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-tcpwm-srmode/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbh</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4,bsp_gen5][kit_t2g_b_h_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbe" req_capabilities_v2="[t2gbe]">
    <name>Manchester Encoding and Decoding using Smart IO</name>
    <id>mtb-t2g-example-scb-spi-manchester</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-scb-spi-manchester</uri>
    <description><![CDATA[This code example demonstrates the encoding and decoding of Manchester protocol using Smart I/O and its verification.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-scb-spi-manchester/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbe</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4][kit_t2g_b_e_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4][kit_t2g_b_e_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gbe" req_capabilities_v2="[t2gbe]">
    <name>TCPWM PWM on the Fly Update</name>
    <id>mtb-t2g-example-tcpwm-on-the-fly</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-tcpwm-on-the-fly</uri>
    <description><![CDATA[This code example demonstrates the update of duty cycle and frequency of a pulse width modulation (PWM) signal on the fly using Timer Counter Pulse Width Modulator (TCPWM) block.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-tcpwm-on-the-fly/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gbe</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4][kit_t2g_b_e_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4][kit_t2g_b_e_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gc2d" req_capabilities_v2="[t2gc2d]">
    <name>Qt Design Studio Display Basic</name>
    <id>mtb-t2g-example-graphics-display-basic</id>
    <category>Graphics</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-graphics-display-basic</uri>
    <description><![CDATA[To use this software, see the <a href="https://www.infineon.com/assets/row/public/documents/10/56/infineon-steps-to-use-the-qt-design-studio-using-the-modustoolbox-training-en.pdf">Steps to use the Qt Design Studio using the ModusToolbox&#8482;</a>. This Demonstration is for checking the display of a graphics image generated by Qt Design Studio via TRAVEO&#8482; T2G Virtual Display Tool. It also demonstrates the capabilities of the display path based on an example showing a simple navigation solution including different display layers.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-graphics-display-basic/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gc2d</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>1.2.0 release</num>
        <commit>release-v1.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gc2d" req_capabilities_v2="[t2gc2d]">
    <name>Qt Design Studio Drawing Basic</name>
    <id>mtb-t2g-example-graphics-drawing-basic</id>
    <category>Graphics</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-graphics-drawing-basic</uri>
    <description><![CDATA[To use this software, see the <a href="https://www.infineon.com/assets/row/public/documents/10/56/infineon-steps-to-use-the-qt-design-studio-using-the-modustoolbox-training-en.pdf">Steps to use the Qt Design Studio using the ModusToolbox&#8482;</a>. This Demonstration is for checking the display of a graphics image generated by Qt Design Studio via TRAVEO&#8482; T2G Virtual Display Tool. It also demonstrates some of the features of the drawing engine, such as drawing simple shapes.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-graphics-drawing-basic/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gc2d</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>1.2.0 release</num>
        <commit>release-v1.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gc2d" req_capabilities_v2="[t2gc2d]">
    <name>Qt Design Studio EmptyApp</name>
    <id>mtb-t2g-example-graphics-empty-app</id>
    <category>Graphics</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-graphics-empty-app</uri>
    <description><![CDATA[To use this software, see the <a href="https://www.infineon.com/assets/row/public/documents/10/56/infineon-steps-to-use-the-qt-design-studio-using-the-modustoolbox-training-en.pdf">Steps to use the Qt Design Studio using the ModusToolbox&#8482;</a>. This is a minimal starter graphics application template for TRAVEO&#8482; T2G Cluster MCU devices. User can design image by Qt Design Studio and display image via TRAVEO&#8482; T2G Virtual Display Tool.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-graphics-empty-app/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gc2d</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>1.2.0 release</num>
        <commit>release-v1.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gc2d" req_capabilities_v2="[t2gc2d]">
    <name>Qt Design Studio Sample Drawing</name>
    <id>mtb-t2g-example-graphics-sample-drawing</id>
    <category>Graphics</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-graphics-sample-drawing</uri>
    <description><![CDATA[To use this software, see the <a href="https://www.infineon.com/assets/row/public/documents/10/56/infineon-steps-to-use-the-qt-design-studio-using-the-modustoolbox-training-en.pdf">Steps to use the Qt Design Studio using the ModusToolbox&#8482;</a>. This Demonstration is for checking the display of a graphics image generated by Qt Design Studio via TRAVEO&#8482; T2G Virtual Display Tool. This demonstration shows the basic steps to use the Graphics Driver. It executes some simple graphical operations such as multiple color gradients.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-graphics-sample-drawing/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gc2d</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>1.2.0 release</num>
        <commit>release-v1.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gc2d" req_capabilities_v2="[t2gc2d]">
    <name>Qt Design Studio JPEG Output</name>
    <id>mtb-t2g-example-graphics-jpeg-output</id>
    <category>Graphics</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-graphics-jpeg-output</uri>
    <description><![CDATA[To use this software, see the <a href="https://www.infineon.com/assets/row/public/documents/10/56/infineon-steps-to-use-the-qt-design-studio-using-the-modustoolbox-training-en.pdf">Steps to use the Qt Design Studio using the ModusToolbox&#8482;</a>. This demonstration is for checking the display of a JPEG image generated by Qt Design Studio via TRAVEO&#8482; T2G Virtual Display Tool. This demonstration shows the basic steps to use the Graphics Driver. It executes some simple graphical operations such as multiple color gradients.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-graphics-jpeg-output/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gc2d</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>1.2.0 release</num>
        <commit>release-v1.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gc2d" req_capabilities_v2="[t2gc2d]">
    <name>Graphics Middleware Empty Template</name>
    <id>mtb-t2g-example-graphics-emptytemplate</id>
    <category>Graphics</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-graphics-emptytemplate</uri>
    <description><![CDATA[This code example is a minimal starter graphics application template for TRAVEO&#8482; T2G Cluster MCU devices. User can use this template as a base to create their own graphics example with Graphics middleware and display image via TRAVEO&#8482; T2G Virtual Display Tool.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-graphics-emptytemplate/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gc2d</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gc2d" req_capabilities_v2="[t2gc2d]">
    <name>Graphics Middleware Matrix</name>
    <id>mtb-t2g-example-graphics-matrix</id>
    <category>Graphics</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-graphics-matrix</uri>
    <description><![CDATA[This code example shows how to utilize matrices to achieve linear, affine and perspective transformations. This allows to have various effects achieved at runtime without prerendering the content.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-graphics-matrix/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gc2d</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gc2d" req_capabilities_v2="[t2gc2d]">
    <name>Graphics Middleware FIR</name>
    <id>mtb-t2g-example-graphics-fir</id>
    <category>Graphics</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-graphics-fir</uri>
    <description><![CDATA[This example shows how to use FIR filter with the graphics middleware. FIR filters can be used to achieve various effects at run time.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-graphics-fir/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gc2d</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gc2d" req_capabilities_v2="[t2gc2d]">
    <name>Graphics Middleware Window Example</name>
    <id>mtb-t2g-example-graphics-windowexample</id>
    <category>Graphics</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-graphics-windowexample</uri>
    <description><![CDATA[This code example demonstrates the fundamental display engine concepts in the Infineon GFX driver through animated bars visualization showing multi-layer composition, surface management, and real-time graphics updates.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-graphics-windowexample/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gc2d</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="t2gc2d" req_capabilities_v2="[t2gc2d]">
    <name>Graphics Middleware FPD-link HDMI basic</name>
    <id>mtb-t2g-example-graphics-fpd-link-hdmi-basic</id>
    <category>Graphics</category>
    <uri>https://github.com/Infineon/mtb-t2g-example-graphics-fpd-link-hdmi-basic</uri>
    <description><![CDATA[This code example is for outputting the display of a basic image with graphics library package via FPD-Link of Graphic Subsystems.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-t2g-example-graphics-fpd-link-hdmi-basic/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>t2gc2d</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen6][kit_t2g_c_2d_6m_lite]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4" req_capabilities_v2="psoc4">
    <name>WDT Interrupt and Reset</name>
    <id>mtb-hv-example-psoc4-wdt-interrupt-reset</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-hv-example-psoc4-wdt-interrupt-reset</uri>
    <description><![CDATA[This example demonstrates how watchdog timer works with the interrupt mode and the reset mode.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-hv-example-psoc4-wdt-interrupt-reset/-/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_psoc4_hvms_128k_lite,kit_psoc4_hvms_64k_lite,kit_psoc4_hvms_128k_lite_02,kit_psoc4_hvms_64k_lite_02]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_psoc4_hvms_128k_lite,kit_psoc4_hvms_64k_lite,kit_psoc4_hvms_128k_lite_02,kit_psoc4_hvms_64k_lite_02]">
        <num>1.2.0 release</num>
        <commit>release-v1.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.1.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_psoc4_hvms_128k_lite,kit_psoc4_hvms_64k_lite]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4" req_capabilities_v2="psoc4">
    <name>TCPWM Timer</name>
    <id>mtb-hv-example-psoc4-tcpwm-timer</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-hv-example-psoc4-tcpwm-timer</uri>
    <description><![CDATA[This code example shows how to configure the timer function using TCPWM (Timer and Counter) block and describes its operation and initial settings.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-hv-example-psoc4-tcpwm-timer/-/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_psoc4_hvms_128k_lite,kit_psoc4_hvms_64k_lite,kit_psoc4_hvms_128k_lite_02,kit_psoc4_hvms_64k_lite_02]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_psoc4_hvms_128k_lite,kit_psoc4_hvms_64k_lite,kit_psoc4_hvms_128k_lite_02,kit_psoc4_hvms_64k_lite_02]">
        <num>1.2.0 release</num>
        <commit>release-v1.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.1.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_psoc4_hvms_128k_lite,kit_psoc4_hvms_64k_lite]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4" req_capabilities_v2="psoc4">
    <name>TCPWM Dead Time</name>
    <id>mtb-hv-example-psoc4-tcpwm-pwm-dt</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-hv-example-psoc4-tcpwm-pwm-dt</uri>
    <description><![CDATA[This code example shows TCPWM dead time mode function as the PWM dead time mode.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-hv-example-psoc4-tcpwm-pwm-dt/-/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_psoc4_hvms_128k_lite,kit_psoc4_hvms_64k_lite,kit_psoc4_hvms_128k_lite_02,kit_psoc4_hvms_64k_lite_02]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_psoc4_hvms_128k_lite,kit_psoc4_hvms_64k_lite,kit_psoc4_hvms_128k_lite_02,kit_psoc4_hvms_64k_lite_02]">
        <num>1.2.0 release</num>
        <commit>release-v1.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.1.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_psoc4_hvms_128k_lite,kit_psoc4_hvms_64k_lite]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4" req_capabilities_v2="psoc4">
    <name>CAPSENSE low power</name>
    <id>mtb-hv-example-psoc4-capsense-low-power</id>
    <category>Sensing</category>
    <uri>https://github.com/Infineon/mtb-hv-example-psoc4-capsense-low-power</uri>
    <description><![CDATA[This code example demonstrates an implementation of a low-power CAPSENSE&trade design using the PSOC&trade 4 MCU. This example features the CAPSENSE&trade buttons. It scans all the widgets and then processes the scanned data.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-hv-example-psoc4-capsense-low-power/-/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_psoc4_hvms_128k_lite,kit_psoc4_hvms_64k_lite,kit_psoc4_hvms_128k_lite_02,kit_psoc4_hvms_64k_lite_02]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_psoc4_hvms_128k_lite,kit_psoc4_hvms_64k_lite,kit_psoc4_hvms_128k_lite_02,kit_psoc4_hvms_64k_lite_02]">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.1.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_psoc4_hvms_128k_lite,kit_psoc4_hvms_64k_lite]">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4" req_capabilities_v2="psoc4">
    <name>CAPSENSE multi-frequency scan</name>
    <id>mtb-hv-example-psoc4-capsense-multi-frequency-scan</id>
    <category>Sensing</category>
    <uri>https://github.com/Infineon/mtb-hv-example-psoc4-capsense-multi-frequency-scan</uri>
    <description><![CDATA[This code example demonstrates the use of the multi-frequency scan (MFS) for PSOC&trade 4 CAPSENSE&trade applications to prevent false touch detection in the presence of external noise.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-hv-example-psoc4-capsense-multi-frequency-scan/-/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_psoc4_hvms_128k_lite,kit_psoc4_hvms_64k_lite,kit_psoc4_hvms_128k_lite_02,kit_psoc4_hvms_64k_lite_02]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_psoc4_hvms_128k_lite,kit_psoc4_hvms_64k_lite,kit_psoc4_hvms_128k_lite_02,kit_psoc4_hvms_64k_lite_02]">
        <num>1.2.0 release</num>
        <commit>release-v1.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.1.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_psoc4_hvms_128k_lite,kit_psoc4_hvms_64k_lite]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4" req_capabilities_v2="psoc4">
    <name>CAPSENSE Pipeline scan and process</name>
    <id>mtb-hv-example-psoc4-capsense-pipeline-scan-and-process</id>
    <category>Sensing</category>
    <uri>https://github.com/Infineon/mtb-hv-example-psoc4-capsense-pipeline-scan-and-process</uri>
    <description><![CDATA[This code example demonstrates how to implement pipeline scanning in CAPSENSE&trade to improve performance. When a particular widget is being processed, the next widget in line can be scanned in parallel.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-hv-example-psoc4-capsense-pipeline-scan-and-process/-/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_psoc4_hvms_128k_lite,kit_psoc4_hvms_64k_lite,kit_psoc4_hvms_128k_lite_02,kit_psoc4_hvms_64k_lite_02]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_psoc4_hvms_128k_lite,kit_psoc4_hvms_64k_lite,kit_psoc4_hvms_128k_lite_02,kit_psoc4_hvms_64k_lite_02]">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.1.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_psoc4_hvms_128k_lite,kit_psoc4_hvms_64k_lite]">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4" req_capabilities_v2="psoc4">
    <name>CAPSENSE CSX button tuning</name>
    <id>mtb-hv-example-psoc4-msc-capsense-csx-button-tuning</id>
    <category>Sensing</category>
    <uri>https://github.com/Infineon/mtb-hv-example-psoc4-msc-capsense-csx-button-tuning</uri>
    <description><![CDATA[This code example demonstrates how to use the CAPSENSE&trade middleware to detect a finger touch on a mutual-capacitance-based button widget in PSOC&trade 4 devices with multi sense converter (MSC).
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-hv-example-psoc4-msc-capsense-csx-button-tuning/-/blob/main/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_psoc4_hvms_128k_lite,kit_psoc4_hvms_64k_lite,kit_psoc4_hvms_128k_lite_02,kit_psoc4_hvms_64k_lite_02]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.5.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_psoc4_hvms_128k_lite,kit_psoc4_hvms_64k_lite,kit_psoc4_hvms_128k_lite_02,kit_psoc4_hvms_64k_lite_02]">
        <num>1.2.0 release</num>
        <commit>release-v1.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.1.0" req_capabilities_per_version_v2="[bsp_gen4] [kit_psoc4_hvms_128k_lite,kit_psoc4_hvms_64k_lite]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
    </versions>
  </app>
</apps>

